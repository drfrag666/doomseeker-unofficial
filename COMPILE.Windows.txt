================================================================================
Compiling Doomseeker in Microsoft Visual Studio 2017 Community with Qt 4.x
Written by Zalewa, June 2012
Last update: 2th July 2021 (by drfrag)
================================================================================
1. Quick introduction.

This guide describes how I compile Doomseeker on Windows. 
This is a solution that I find efficient enough. 

Compiling other people's programs on Windows is usually a difficult and
frustrating task. If you follow this guide you should be able to compile
binaries for Doomseeker, Wadseeker and all plugins by yourself.
================================================================================
2. Compiler.

On Windows only one compiler is officially supported: the one that comes with
Microsoft Visual Studio 2017. Forget about MinGW. MinGW is attached
as the default compiler to such programs as Code::Blocks or Qt Creator (AFAIK). 
Binaries created by MinGW are larger and slower than the ones created by MSVC.
Also the debugger that comes with MinGW is awful. Don't be deceived by the fact
that MinGW is advertised as Windows port of GCC. 

First step:
Get Microsoft Visual Studio 2017 Community. It's free for commercial 
and non-commercial use and you can use the same e-mail address multiple times
to get multiple registration keys. The registration process is very simple and
it's also free of any charge.

Note:
Visual Studio version is important. You need to compile both Doomseeker and Qt
with the same compiler and CRT (specifically same toolset and Windows SDK).
================================================================================
3. Qt.

https://download.qt.io/archive/qt/4.8/4.8.7/

Qt download page has several links that allow to download the Qt SDK.
The link that should be used will say "qt-everywhere-opensource-src-4.8.7.zip". 

This package contains all libraries that you need and the Qt Designer that 
helps with creating GUI components.

Find instructions on how to compile and install Qt 4 with VS 2017.
You'll need the files included in the Compile-Windows folder.

Once Qt is installed you may want to modify your PATH environment variable
so that it contains path to the "bin" directory inside your Qt installation.
This will be helpful with CMake. This guide will not describe how to modify
environment variables in Windows. If you decide to modify the PATH variable
(you really should do that) you will need to reboot your system.
================================================================================
4. CMake.

CMake is a quite useful tool that helps with creation of project files and
makefiles for various different compilers and Operating Systems. It allows
programmers to avoid uploading all that mess that IDEs create when they
spawn a new project. Also, it helps with keeping track of all the dependencies
that the program needs in order to compile.

Get CMake now.

Launch CMake GUI.

The first thing you would like to set is "Where to build the binaries". This 
should be located somewhere outside the repository. For example:
D:/dev/Doomseeker/visual2017

The second thing is "Where is the source code". Pick the top-most directory
that contains the CMakeLists.txt file. In case of Doomseeker this is the root
directory of the repository. For example:
D:/dev/Doomseeker/repo

Now press "Configure" button.

CMake should prompt about the type of compiler you want to use. Pick
"Visual Studio 15 2017". Also make sure that "Use default native compilers"
option is selected. Now press "Finish". If you did everything right up to this
point then CMake should find the MSVC 2017 and Qt installations. The initial
configuration may take some time but should finish without errors. Once done, 
CMake will display some key-value positions in a table with a red background. 
Red background means that these settings are new.

Find "Grouped" and "Advanced" checkboxes in CMake GUI and check them both. The
list should now change and you should see following items:
- Ungrouped Entries
- BZIP2
- CMAKE
- FORCE
- QT
- ZLIB

First of all open "Ungrouped Entries" and uncheck "BUILD_SHARED_LIBS". This
comes from ZLib source code and we don't need this because we already have a
compiled version of ZLib.

Now we need to show Visual Studio where BZip2 and ZLib libraries are located.
When you open BZIP2 and ZLIB groups it should say that all entries were not 
found. Fortunately, the VS2008 compatible compiled forms of these libraries 
are in Doomseeker repository in "dependencies" directory. Both libraries 
are prepared for static linking and no additional DLLs are required.

The "_INCLUDE_DIR" value should point to the directory where the ".h" files are.
The "_LIBRARIES" value should point to the ".lib" file.

When you finish setting everything press "Configure" button again so that all
red options should turn to normal background color and then press "Generate"
button. This should create the ".sln" file in the target directory. You may
now open this file with Visual Studio 2008 and then try to compile the program.
================================================================================
Now you may build the program and while it compiles you may open one 
of the source code files that I created back in 2009 and cry :)
================================================================================
